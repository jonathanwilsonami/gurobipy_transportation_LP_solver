#!/usr/bin/python

import gurobipy as gp



Location = list(range(38))
N = len(Location)
m = 10000000
# Distance = [[m, 455, 706, 2654, 1052, 480],
#             [455, m, 986, 2983, 1408, 546],
#             [706, 986, m, 2020, 517, 525],
#             [2654, 2983, 2020, m, 1625, 2519],
#             [1052, 1408, 517, 1625, m, 1001],
#             [480, 546, 525, 2519, 1001, m]]
Distance = [[152,236.5,675,820.5,318.5,554.5,350,294,542,138,540,640.5,559,433,485,457,738,518.5,576,462.5,424,316.5,444,650.5,207,407,577.5,870.5,561.5,266.5,332.5,921,527,642,578,222.5,794,628.5],[236.5,662,716.5,507.5,535.5,423.5,392.5,449,169.5,423,520.5,760,245,493,637.5,489.5,516.5,420.5,444,943.5,238,866,436.5,277,239.5,193,220,627.5,445.5,497,719,574,395.5,710.5,289.5,276.5,886,276],[675,716.5,780,500.5,656.5,534.5,778,890,318.5,616.5,685.5,458.5,510.5,680.5,533.5,189,480.5,675.5,469,742,487,666.5,310,445.5,617.5,563,871.5,574.5,780.5,558.5,636,473,779.5,410.5,613.5,836,582,493.5],[820.5,507.5,500.5,210,456.5,143,698.5,467.5,728.5,674.5,438,459,810,709.5,774.5,413,248,470,681,230.5,646,513.5,656,549.5,731,427,401,459.5,298.5,350.5,445.5,598.5,811.5,437.5,570,536.5,435.5,741.5],[318.5,535.5,656.5,456.5,866,218.5,512,632,505.5,482,421.5,602.5,459.5,730,577.5,562.5,691.5,167,347.5,715.5,531,530.5,902.5,524,561,507.5,424,245.5,691.5,133,314,758.5,599,907,613.5,545,744,689.5],[554.5,423.5,534.5,143,218.5,905,653.5,669.5,932,446,608.5,352,788,231.5,685,717.5,769,520.5,264,761,707,711.5,427,713,530,251.5,586,807.5,561,276.5,903,317,426,496.5,397.5,539.5,382,590],[350,392.5,778,698.5,512,653.5,361,767.5,816,219.5,736,455.5,510,311.5,608.5,423.5,651,649,780.5,774.5,506.5,430,583,480.5,734,523,253.5,552,514,547.5,383,643.5,438.5,345,641,379.5,208,558.5],[294,449,890,467.5,632,669.5,767.5,965,765,192.5,788,831,530,955.5,792.5,909.5,539,807,992.5,817.5,675,532,571.5,520,817,344.5,641,568.5,307,587,473,564,464.5,459,679,291.5,857,686.5],[542,169.5,318.5,728.5,505.5,932,816,765,201,639,636,703.5,584.5,393,619,515,575,414.5,190.5,243,496.5,834,949.5,619,570,727,364.5,586,310,408.5,167,411.5,564.5,589,398,482,560,582.5],[138,423,616.5,674.5,482,446,219.5,192.5,639,746,743,552,636.5,395,620,824,599,529,264.5,773,234.5,344.5,312.5,725,644.5,696.5,600.5,585,341,526.5,424,805,647,718,518,543,531.5,617],[540,520.5,685.5,438,421.5,608.5,736,788,636,743,438,586,507.5,614,475.5,605.5,398,379.5,515,137.5,248,650,486,204,503,481.5,412,329,401,284,769,805,620.5,737,508.5,271.5,557.5,762],[640.5,760,458.5,459,602.5,352,455.5,831,703.5,552,586,272,445.5,636.5,280.5,808.5,807,681.5,514,288,376,693,717.5,720,569.5,697,227,118,548.5,466.5,708,616.5,677,550,491.5,774.5,836,508],[559,245,510.5,810,459.5,788,510,530,584.5,636.5,507.5,445.5,206,825.5,705.5,657,716,901,480.5,642.5,178,651,497,347.5,409,445,529,642,608.5,292.5,627.5,766,682.5,267,545.5,501.5,800,361],[433,493,680.5,709.5,730,231.5,311.5,955.5,393,395,614,636.5,825.5,835,820,793.5,311,711,761,513.5,656,921,355,621.5,639.5,551,520,694.5,581,163.5,235.5,845.5,305.5,734,417.5,310.5,363.5,565.5],[485,637.5,533.5,774.5,577.5,685,608.5,792.5,619,620,475.5,280.5,705.5,820,233,628.5,545.5,859,531,565,753,837,361.5,705.5,354.5,800,482.5,529,601.5,580,692.5,708.5,516.5,466.5,572.5,461,493,607],[457,489.5,189,413,562.5,717.5,423.5,909.5,515,824,605.5,808.5,657,793.5,628.5,125,368,469.5,531.5,843,692,389.5,637,139,652,462.5,541.5,546.5,293,387.5,617.5,671.5,470,340.5,599.5,172,751,519],[738,516.5,480.5,248,691.5,769,651,539,575,599,398,807,716,311,545.5,368,955,898,323,643.5,915,489,579.5,665.5,429.5,893.5,695.5,651,501.5,690.5,739.5,244.5,616,549,548,534.5,352.5,766],[518.5,420.5,675.5,470,167,520.5,649,807,414.5,529,379.5,681.5,901,711,859,469.5,898,751,346,413.5,311.5,515.5,138.5,618.5,623.5,778.5,625.5,725,502,772,368,553,456.5,455.5,440.5,295.5,607,510],[576,444,469,681,347.5,264,780.5,992.5,190.5,264.5,515,514,480.5,761,531,531.5,323,346,612,820,784.5,794.5,486,255,430.5,615,154.5,761.5,559,345.5,656.5,728,528.5,608.5,288,810,288,434],[462.5,943.5,742,230.5,715.5,761,774.5,817.5,243,773,137.5,288,642.5,513.5,565,843,643.5,413.5,820,185,412,337,469.5,674,621,222,465,728.5,490.5,208,559.5,578.5,494.5,533,523.5,478,642.5,472.5],[424,238,487,646,531,707,506.5,675,496.5,234.5,248,376,178,656,753,692,915,311.5,784.5,412,664,522,319,272,195.5,258.5,466.5,841.5,678.5,208.5,558.5,559,380.5,633.5,843.5,677,407,831.5],[316.5,866,666.5,513.5,530.5,711.5,430,532,834,344.5,650,693,651,921,837,389.5,489,515.5,794.5,337,522,196,711,646,460,756,537,422,461,246,752.5,250,722,605.5,738.5,481.5,419.5,797],[444,436.5,310,656,902.5,427,583,571.5,949.5,312.5,486,717.5,497,355,361.5,637,579.5,138.5,486,469.5,319,711,904,792,617,713,422,664.5,628.5,296.5,322,534,347.5,197,296,713,615.5,750.5],[650.5,277,445.5,549.5,524,713,480.5,520,619,725,204,720,347.5,621.5,705.5,139,665.5,618.5,255,674,272,646,792,526,558,675.5,521.5,282,164.5,410.5,586,682.5,278,740,507.5,572.5,228.5,527.5],[207,239.5,617.5,731,561,530,734,817,570,644.5,503,569.5,409,639.5,354.5,652,429.5,623.5,430.5,621,195.5,460,617,558,285,932.5,328.5,542.5,584.5,451.5,402,543,564,689,480,597.5,228.5,460.5],[407,193,563,427,507.5,251.5,523,344.5,727,696.5,481.5,697,445,551,800,462.5,893.5,778.5,615,222,258.5,756,713,675.5,932.5,857,577,535.5,479,508.5,446,503,387.5,730.5,348.5,688,393,416.5],[577.5,220,871.5,401,424,586,253.5,641,364.5,600.5,412,227,529,520,482.5,541.5,695.5,625.5,154.5,465,466.5,537,422,521.5,328.5,577,681,375.5,361,684.5,311.5,964,635,854,959.5,974,497.5,316],[870.5,627.5,574.5,459.5,245.5,807.5,552,568.5,586,585,329,118,642,694.5,529,546.5,651,725,761.5,728.5,841.5,422,664.5,282,542.5,535.5,375.5,191,725,568,758,566.5,664,473,364,358,387,913.5],[561.5,445.5,780.5,298.5,691.5,561,514,307,310,341,401,548.5,608.5,581,601.5,293,501.5,502,559,490.5,678.5,461,628.5,164.5,584.5,479,361,725,177,530.5,564,408.5,515,469,685.5,600,619.5,915.5],[266.5,497,558.5,350.5,133,276.5,547.5,587,408.5,526.5,284,466.5,292.5,163.5,580,387.5,690.5,772,345.5,208,208.5,246,296.5,410.5,451.5,508.5,684.5,568,530.5,626,396,689.5,826,565,910.5,567,665,459.5],[332.5,719,636,445.5,314,903,383,473,167,424,769,708,627.5,235.5,692.5,617.5,739.5,368,656.5,559.5,558.5,752.5,322,586,402,446,311.5,758,564,396,481,565.5,329.5,779.5,481,531,797,463],[921,574,473,598.5,758.5,317,643.5,564,411.5,805,805,616.5,766,845.5,708.5,671.5,244.5,553,728,578.5,559,250,534,682.5,543,503,964,566.5,408.5,689.5,565.5,189,200,790,348,483.5,478.5,246],[527,395.5,779.5,811.5,599,426,438.5,464.5,564.5,647,620.5,677,682.5,305.5,516.5,470,616,456.5,528.5,494.5,380.5,722,347.5,278,564,387.5,635,664,515,826,329.5,200,784,333.5,712.5,694,608,581.5],[642,710.5,410.5,437.5,907,496.5,345,459,589,718,737,550,267,734,466.5,340.5,549,455.5,608.5,533,633.5,605.5,197,740,689,730.5,854,473,469,565,779.5,790,333.5,587,797,569,631.5,588.5],[578,289.5,613.5,570,613.5,397.5,641,679,398,518,508.5,491.5,545.5,417.5,572.5,599.5,548,440.5,288,523.5,843.5,738.5,296,507.5,480,348.5,959.5,364,685.5,910.5,481,348,712.5,797,699,268.5,964.5,404.5],[222.5,276.5,836,536.5,545,539.5,379.5,291.5,482,543,271.5,774.5,501.5,310.5,461,172,534.5,295.5,810,478,677,481.5,713,572.5,597.5,688,974,358,600,567,531,483.5,694,569,268.5,527,593,706],[794,886,582,435.5,744,382,208,857,560,531.5,557.5,836,800,363.5,493,751,352.5,607,288,642.5,407,419.5,615.5,228.5,228.5,393,497.5,387,619.5,665,797,478.5,608,631.5,964.5,593,313,758],[628.5,276,493.5,741.5,689.5,590,558.5,686.5,582.5,617,762,508,361,565.5,607,519,766,510,434,472.5,831.5,797,750.5,527.5,460.5,416.5,316,913.5,915.5,459.5,463,246,581.5,588.5,404.5,706,758,397]]

for i in range(len(Location)):
    Distance[i][i]=m

def findLoops(x):
    loops = []
    # print(x)
    remaining = list(range(N))
    
    while  len(remaining) > 0:
        # print("remaining: ", remaining)
        city = remaining.pop(0)
        tour = [city]
        tourEnd = False
        while not tourEnd:
            tourEnd = True
            # print(tour)
            # print(remaining)
            # print("remaining: ", remaining)
            for dest in remaining:
                # print(city, dest)
                if x[city, dest].x >=.0001:
                    tour.append(dest)
                    # print(tour)
                    remaining.remove(dest)
                    city = dest
                    tourEnd = False
                    break
        loops.append(tour.copy())
        
        # print(tour)
        
    return loops
            
        


def TSPSolve():

    m = gp.Model()
    m.modelSense = gp.GRB.MINIMIZE
    m.setParam('OutputFlag', 0) 
    x = {}
    
    for i in range(N):
        for j in range(N):
            x[i, j] = m.addVar(vtype = gp.GRB.BINARY, name = f"x[{i},{j}]")
    
    m.update()
    
    m.setObjective(sum(sum(Distance[i][j] * x[i, j] for j in range(N)) for i in range(N)))
    
    m.update()
    
    ToCons = {}
    for i in range(N):
        ToCons[i] = m.addConstr(sum(x[i, j] for j in range(N)) == 1)
    m.update()
    
    FromCons = {}
    for j in range(N):
        FromCons[j] = m.addConstr(sum(x[i, j] for i in range(N)) == 1)
    m.update()
    
    
    m.optimize()
    
    print ("Optimal Transportation Cost = ", m.objVal)
    
    
    print ("Planned Trip:")
    
    # for i in range(N):
    #     for j in range(N):
    #         if x[i, j].x >= .0001:
    #             print (Location[i], "--->", Location[j])
    loops = findLoops(x)
    print(loops, "\n")
    while len(loops) > 1:
        for tour in loops:
            m.addConstr(sum(x[tour[i], tour[(i+1)%len(tour)]] for i in range(len(tour)))<= len(tour)-1, name = f"sbtrElim+")
            m.addConstr(sum(x[tour[(i+1)%len(tour)], tour[i]] for i in range(len(tour)))<= len(tour)-1, name = f"sbtrElim-")
            # print(sum(x[tour[i],tour[(i+1)%len(tour)]] for i in range(len(tour)))<= len(tour)-1)
        m.update()
        m.optimize()
        loops = findLoops(x)

        # print(x)
        print ("Optimal Transportation Cost = ", m.objVal)
        
        
        print ("Planned Trip:")
        
        # for i in range(N):
        #     for j in range(N):
        #         if x[i, j].x >= .0001:
        #             print (Location[i], "--->", Location[j])
        print(loops, "\n")
        # break
    # print("hello------------------", findLoops(x))
    m.write('largeTSP.lp')

       

TSPSolve()
